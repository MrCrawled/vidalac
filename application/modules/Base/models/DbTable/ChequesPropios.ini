[module]
    requires = "/direct/Base/ChequesPropios?javascript"

[defaultAbmWindow]
    title   = Cheques Propios
    width   = 1100
    height  = 500

[defaultGrid]
    abmWindowConfig.title   = Cheques Propios
    abmWindowWidth          = 500
    abmWindowHeight         = 450
    
    buildToolbar = "JS:function() {
        var cfg = [];
        if (this.topButtons.edit) {
            cfg.push({
                text: 'Editar',
                iconCls: 'x-btn-text-icon',
                ref: '../editButton',
                icon: 'images/application_form_edit.png',
                handler: this.abmWindowShow,
                scope: this,
                disabled: !this.loadAuto});
            cfg.push('-');
        }
        cfg.push({
            text: 'Ver serie de cheques',
            icon: 'images/eye.png',
            cls: 'x-btn-text-icon',
            ref: '../multiReportButton',
            handler: function() {
                selections = this.getSelectionModel().getSelections();
                var ret = false;
                if (selections.length > 0) {
                    var ids = '';
                    Ext.each(selections, function (el, i) {

                        if (!ret && el.data.Impreso == '1') {
                            Ext.Msg.alert('Atencion', 'Algunos de los cheques seleccionados ya estan impresos.');
                            ret = true;
                        }
                        if (!ret && !el.data.Monto) {
                            Ext.Msg.alert('Atencion', 'Algunos de los cheques no tiene monto.');
                            ret = true;
                        }
                        if (!ret && !el.data.FechaDeEmision) {
                            Ext.Msg.alert('Atencion', 'Algunos de los cheques no tiene fecha de emisi&oacute;n.');
                            ret = true;
                        }                                                    
                        if (ids) ids += ',';
                        ids += el.data.Id
                    }, this);
                    if (ret) return;
                    this.publish('/desktop/modules/Window/birtreporter', {
                        action: 'multicheques',
                        id: ids, template: 'Cheques',
                        width: 900,
                        height: 500
                    });
                } else {
                    Ext.Msg.alert('Atencion', 'Seleccione al menos un registro para imprimir cheques');
                }
            },
            scope: this,
            disabled: !this.loadAuto
        });
        cfg.push('-');
        cfg.push({
            text: 'Imprimir...',
            icon: 'images/printer.png',
            cls: 'x-btn-text-icon',
            ref: '../multiReportButton',
            menu: [
                {
                    text: 'Seleccionados',
                    icon: 'images/accordian.gif',
                    handler: function() {
                        selections = this.getSelectionModel().getSelections();
                        if (selections.length > 0) {
                            Ext.MessageBox.confirm('Cuidado', 'Se imprimiran los cheques seleccionados. Esta seguro?', function(btn) {
                                if (btn == "quote"yes"quote") {
                                    var ids = '';

                                    Ext.each(selections, function(item) {
                                        ids += (item.data.Id)+',';
                                    });

                                    ids = ids.slice(0, -1);
                                    
                                    var urlp = '/Base/ReporteCheques/imprimir?ids='+ids;

                                    app.publish('/desktop/modules/js/commonApps/showUrl.js', {
                                        action: 'launch',
                                        url: urlp,
                                        template: 'Imprimir Cheques',
                                        width: 900,
                                        height: 500
                                    });
                                }
                            }, this);
                        } else {
                            Ext.Msg.alert('Atencion', 'Seleccione al menos un cheque para imprimir');
                        }
                    },
                    scope: this
                },
                {
                    text: 'Rango...',
                    icon: 'images/text_linespacing.png',
                    scope: this,
                    handler: function() {
                        var gridstore = this.store;
                        var win = app.desktop.createWindow({
                            id: this.id+'-awin',
                            title: 'Imprimir cheques por rango',
                            width: 500,
                            height: 200,
                            //bodyStyle: 'padding:5px 5px 0',
                            border: false,
                            frame: true,
                            //shim: false,
                            modal: true,
                            animCollapse: false,
                            layout: 'fit',
                            items: {
                                xtype: 'radform',
                                border: false,
                                items: [{
                                    xtype: 'xcombo',
                                    width: 389,
                                    minChars: 3,
                                    displayField: 'NumeroDeChequera',
                                    autoLoad: false,
                                    autoSelect: true,
                                    selectOnFocus: true,
                                    forceSelection: true,
                                    forceReload: true,
                                    hiddenName: 'Chequera',
                                    loadingText: 'Cargando...',
                                    lazyRender: true,
                                    searchField: 'NumeroDeChequera',
                                    store: new Ext.data.JsonStore({
                                        url: 'datagateway\/combolist\/model\/Chequeras\/m\/Base',
                                        storeId: 'ChequeraStore'
                                    }),
                                    typeAhead: false,
                                    valueField: 'Id',
                                    pageSize: 6,
                                    editable: true,
                                    autocomplete: true,
                                    allowBlank: false,
                                    allowNegative: false,
                                    fieldLabel: 'Chequera',
                                    name: 'Chequera',
                                    displayFieldTpl: 'Serie {Serie} / Chequera {NumeroDeChequera} / {BancosSucursalesDescripcion}',
                                    tpl: RadTemplates.chequeras,
                                    listeners: {
                                        'select': function(combo, r, index) {
                                            var form = this.findParentByType('radform').getForm();
                                            var desde = form.findField('RangoDesde');
                                            var hasta = form.findField('RangoHasta');
                                            var numeroFinal = parseInt(r.data.NumeroInicio) +
                                                parseInt(r.data.Cantidad);
                                            
                                            desde.minValue = r.data.NumeroInicio;
                                            desde.maxValue = numeroFinal;
                                            hasta.minValue = r.data.NumeroInicio;
                                            hasta.maxValue = numeroFinal;

                                            desde.emptyText = r.data.NumeroInicio;
                                            hasta.emptyText = numeroFinal;

                                            form.isValid();
                                        }
                                    },
                                    scope: this
                                },
                                {
                                    xtype: 'fieldset',
                                    title: 'N&uacute;mero',
                                    labelWidth: 69,
                                    defaults: {
                                        xtype: 'numberfield',
                                        allowBlank: false,
                                        allowDecimals: false,
                                        allowNegative: false,
                                        msgTarget: 'side'
                                    },
                                    items: [{
                                        name: 'RangoDesde',
                                        fieldLabel: 'Desde'
                                    },
                                    {
                                        name: 'RangoHasta',
                                        fieldLabel: 'Hasta'
                                    }]
                                }]
                            },
                            buttons: [{
                                text: 'Imprimir',
                                handler: function() {
                                    var win = this.findParentByType('window');
                                    var form = win.items.first().getForm();
                                    if (form.isValid()) {
                                        var chequera = form.findField('Chequera');
                                        var desde = form.findField('RangoDesde');
                                        var hasta = form.findField('RangoHasta');
                                        if (desde.getValue() > hasta.getValue()) {
                                            Ext.Msg.alert('Atencion', 'El cheque de inicio debe ser igual o superior al de final');
                                            return false;
                                        }
                                        Models.Base_Model_ChequesPropiosMapper.enviarAImpresoraRango(chequera.getValue(), desde.getValue(), hasta.getValue(), function(result, e) {
                                            if (e.status) {
                                                gridstore.load();
                                                win.close();
                                            }
                                        }, this);
                                    } else {
                                        Ext.Msg.alert('Atencion', 'Debe completar correctamente todos los campos');
                                    }
                                }
                            }]
                        });
                        win.show();
                    }
                }
            ]
        });
        cfg.push('-');
        cfg.push({
            text: 'Marcar no impreso',
            icon: 'images/printer_error.png',
            handler: function() {
                selections = this.getSelectionModel().getSelections();
                if (selections.length > 0) {
                    Ext.MessageBox.confirm('Cuidado', 'Esta a punto de marcar un cheque como NO IMPRESO.<br>Es posible que haya sido impreso anteriormente.<br><br><span style="quote"color:red"quote">&iquest;Desea continuar?</span>', function(btn) {
                        if (btn == "quote"yes"quote") {
                            var ids = [];
                            Ext.each(selections, function(item) {
                                ids.push(item.data.Id);
                            });
                            Models.Base_Model_ChequesPropiosMapper.marcarNoImpreso(ids, function(result, e) {
                                if (e.status) {
                                    Ext.each(result, function(values) {
                                        this.store.load();
                                    }, this);
                                }
                            }, this);
                        }
                    }, this);
                } else {
                    Ext.Msg.alert('Atencion', 'Seleccione al menos un cheque para marcar como no impreso');
                }
            },
            scope: this,
            disabled: !this.loadAuto
        });
        cfg.push('-');
        cfg.push({
            scope: this,
            text: 'Ocultar Vacios',
            enableToggle: true,
            icon: 'images/bullet_blue.png',
            toggleHandler: function(b, s) {
                if (s) {
                    this.setPermanentFilter(100,'ChequeEstado',1,'numeric','ne'); 
                    this.store.load();
                } else {
                    this.clearPermanentFilter(100);
                    this.store.load();
                }
                
            }
        });
        cfg.push('-');
        cfg.push({
            scope: this,
            text: 'Ocultar Historicos',
            enableToggle: true,
            icon: 'images/bullet_purple.png',
            toggleHandler: function(b, s) {
                if (s) {
                    this.setPermanentFilter(110,'ChequeEstado',7,'numeric','ne'); 
                    this.store.load();
                } else {
                    this.clearPermanentFilter(110);
                    this.store.load();
                }
                
            }
        });

        this.tbar = cfg;
    }"

    topButtons.add  = "false"
    topButtons.del  = "false"
    topButtons.edit = "true"

;   report.0.text = "Imprimir"          ;texto del boton
;   report.0.file = "UnCheque"          ;archivo del reporte
;   report.0.requireSelected = "false"  ;false para que se pueda ver sin seleccionar ningun registro
;   report.0.separator = "true"         ;true para agregar un separador antes de este boton
;   report.0.output = "pdf"             ;formato de salida: pdf|html|xls
;   report.0.window.title = "Reporte"   ;titulo de la ventana
;   report.0.window.width = 600         ;ancho de la ventana
;   report.0.window.height = 400        ;alto de la ventana
	
[default]

    BancoSucursal.header = "Banco Sucursal"
    ;BancoSucursal.hidden = "true"
    BancoSucursal.width = 200
    BancoSucursal.align = "left"
    BancoSucursal.editor.width = 250
    BancoSucursal.editor.fieldLabel = "Banco Sucursal"
    ;BancoSucursal.editor.xtype = LinkTriggerField
    ;BancoSucursal.editor.link.module = abmBancosSucursalesdefault
    ;BancoSucursal.editor.link.grid = ABM_abmBancosSucursalesdefault_Grid
    ;BancoSucursal.editor.xtype= "hidden"
    BancoSucursal.filter.type = "string"
	
    Chequera.width = 40
    Chequera.header = "Chra"
    Chequera.editor.xtype= "hidden"
    Chequera.filter.type = "string"
	
    Serie.width = 30
    Serie.editor.width = 80
    Serie.editor.xtype= "hidden"
    Serie.filter.type = "string"

    Numero.header = "Numero"
    Numero.width = 60
    Numero.editor.width = 80
    Numero.editor.xtype= "hidden"
    Numero.filter.type = "string"
    Numero.renderer = "JS:Ext.ux.Format.zeroFill(8, 'Numero')"

    TipoDeCheque.header = "Tipo De Cheque"
    TipoDeCheque.width = 80
    TipoDeCheque.hidden = "true"
    TipoDeCheque.align = "left"
    TipoDeCheque.editor.width = 250
    TipoDeCheque.editor.fieldLabel = "Tipo De Cheque"
    TipoDeCheque.filter.type = "string"

    ChequeEstado.header = "Cheque Estado"
    ChequeEstado.width = 90
    ChequeEstado.align = "left"
    ChequeEstado.editor.width = 250
    ChequeEstado.editor.fieldLabel = "Cheque Estado"
    ChequeEstado.filter.type = "string"

    OrdenDePago.header = OP Asig.
    OrdenDePago.width = 100
    OrdenDePago.filter.type = "string" 

    TipoDeEmisorDeCheque.header = "Tipo De Emisor De Cheque"
    TipoDeEmisorDeCheque.width = 120
    TipoDeEmisorDeCheque.hidden = "true"
    TipoDeEmisorDeCheque.align = "left"
    TipoDeEmisorDeCheque.editor.xtype= "hidden"
    TipoDeEmisorDeCheque.filter.type = "string"

    TerceroEmisor.header = null
    TerceroEmisor.editor.xtype= "hidden"

    Generador.header = null
    Generador.editor.xtype= "hidden"

    FechaDeRecepcion.header = "Fecha De Recepcion"
    FechaDeRecepcion.hidden = "true"
    FechaDeRecepcion.width = 80
    FechaDeRecepcion.editor.fieldLabel = "Fecha De Recepcion"
    FechaDeRecepcion.editor = null
    FechaDeRecepcion.filter.type = "date"

    FechaDeEmision.header = "Fecha Emision"
    FechaDeEmision.hidden = "true"
    FechaDeEmision.width = 70
    FechaDeEmision.editor.fieldLabel = "Fecha Emision"
    FechaDeEmision.filter.type = "date"

    FechaDeMovimiento.header = "Fecha De Movimiento"
    FechaDeMovimiento.hidden = "true"
    FechaDeMovimiento.width = 70
    FechaDeMovimiento.editor.fieldLabel = "Fecha De Movimiento"
    FechaDeMovimiento.editor = null
    FechaDeMovimiento.filter.type = "date"
    
	CuentaDeMovimiento.header = null
	CuentaDeMovimiento.editor = null  

    FechaDeVencimiento.header = "Fecha Venc."
    FechaDeVencimiento.hidden = "true"
    FechaDeVencimiento.width = 70
    FechaDeVencimiento.editor.fieldLabel = "Fecha Venc."
    FechaDeVencimiento.filter.type = "date"

    FechaDeCobro.header = "Fecha Cobro"
    FechaDeCobro.width = 70
    FechaDeCobro.hidden = "true"
    FechaDeCobro.editor.fieldLabel = "Fecha Cobro"
    FechaDeCobro.filter.type = "date"

    PagueseA.header = "Páguese a"
    PagueseA.editor.fieldLabel = "Páguese a"
    PagueseA.editor.width = 250
    PagueseA.width = 150
    PagueseA.filter.type = "string"    

    Persona.header = "Razon Social"
    Persona.editor.fieldLabel = "Razon Social"
    Persona.width = 150
    Persona.align = "left"
    Persona.editor.width = 250
    Persona.filter.type = "string"

    ChequeManual.header = "Cheque manual"
    ChequeManual.width = 70
    ChequeManual.hidden = "true"
    ChequeManual.editor.xtype= "hidden"
    ChequeManual.filter.type = "Boolean"

    Monto.width = 70
    Monto.editor.width = 90
    Monto.renderer = JS:Ext.util.Format.usMoney
    Monto.filter.type = "numeric"

    MontoEnLetras.header = null
    MontoEnLetras.editor.width = 350
    MontoEnLetras.editor.fieldLabel = "Monto en letras"
    MontoEnLetras.editor.xtype= "hidden"

    Cruzado.header = "//" 	
    Cruzado.width   = 30
    Cruzado.editor.fieldLabel = "Cruzado"    
    Cruzado.filter.type = "Boolean"

    NoALaOrden.header = "N.O."
    NoALaOrden.width = 38
    NoALaOrden.editor.fieldLabel = "No a la Orden"
    NoALaOrden.filter.type = "Boolean"
	
    ;Impreso.sortable = true
    Impreso.header = "Imp."
    Impreso.filter.type = "Boolean"
    Impreso.width = 38

    Cobrado.header = "Cobrado"   
    Cobrado.width  = 30
    Cobrado.editor.fieldLabel = "Cobrado"    
    Cobrado.filter.type = "Boolean" 
	
    ;OrdenDePago.header = null
    ;OrdenDePago.editor.xtype = "hidden"

    TieneRecibo.header = null 
    TieneRecibo.editor = null  

    CuitTerceroEmisor.header = null 
    CuitTerceroEmisor.editor = null          
	
[reducido:default]
	
    PagueseA.header = null
    TipoDeCheque.header = null
    Serie.header = null
    BancoSucursal.header = null
    Cuit.header = null
    RazonSocial.header = null
    FechaDeRecepcion.header = null
    FechaDeCobro.header = null
    ChequeManual.header = null
    ;FechaDeVencimiento.header = null
    FechaDeMovimiento.header = null
    RazonSocial.header = null
    TipoDeCampo.header = null
